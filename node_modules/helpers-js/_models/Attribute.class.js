var Util = require('./Util.class.js')
var ObjectString = require('./ObjectString.class.js')

/**
 * Represents an HTML attribute.
 * @module
 */
module.exports = class Attribute {
  /**
   * Construct a new Attribute object.
   * @param {string} name the immutable name of the tag
   * @param {Attribute.Type} type the immutable type of the tag
   * @param {string} description the description of the tag
   * @param {string=} characteristics.usage usage guidelines
   */
  constructor(name, type, description) {
    /** @private @final */ this._NAME        = name
    /** @private @final */ this._TYPE        = type
    /** @private @final */ this._DESCRIPTION = description
    /** @private */ this._usage = ''
  }

  /**
   * Return the name of this attribute.
   * @return {string} this’s name
   */
  get name() { return this._NAME }

  /**
   * Return the type of this attribute.
   * @return {Attribute.Type} this’s type
   */
  get type() { return this._TYPE }

  /**
   * Return the description of this attribute.
   * @return {string} this’s description
   */
  get description() { return this._DESCRIPTION }


  /**
   * Set/get a usage guidelines description.
   * @param  {string=} str usage guidelines
   * @return {(Attribute|string)} this || this’s usage guidelines
   */
  usage(str) {
    if (arguments.length) {
      this._usage = str
      return this
    } else return this._usage
  }

  /**
   * Set/get the list of allowed elements that support this attribute.
   * Each entry of the array must be a valid css selector.
   * @param  {Array<string>=} arr list of css selectors
   * @return {(Attribute|Array<string>)} this || this’s elements array
   */
  elements(arr) {
    if (arguments.length) {
      this._elements = arr
      return this
    } else return this._elements
  }







  /**
   * Enum for attribute types.
   * @type {string}
   */
  static get Type() {
    return {
      /** The attribute, if present, has exactly and only the empty string ("") as a value.    */ BOOLEAN: 'boolean',
      /** The attribute, if present, has a value that is one of a list of pre-defined strings. */ ENUM   : 'enum',
      /** The attribute, if present, has a string value that can be converted to a number.     */ NUMBER : 'number',
      /** The attribute, if present, has any string value.                                     */ STRING : 'string',
    }
  }
}

let checked = new Attribute(
  'checked',
  Attribute.Type.BOOLEAN,
  'Indicates whether the element is selected by default on page load.'
)
  .usage('Do not change the value (i.e. presence) of this attribute with Javascript.')
  .elements([
    'input[type="radio"]',
    'input[type="checkbox"]',
  ])

let aria_checked = new Attribute(
  'aria-checked',
  Attribute.Type.ENUM,
  'Indicates the current state of relevant form elements.'
)
  .usage('')
  .elements([
    '[role="checkbox"]',
    '[role="option"]',
    '[role="radio"]',
    '[role="switch"]',
  ])
  .values({})
